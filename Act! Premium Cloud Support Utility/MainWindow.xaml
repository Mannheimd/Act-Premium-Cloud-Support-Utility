<Window x:Class="Act__Premium_Cloud_Support_Utility.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Act__Premium_Cloud_Support_Utility"
        xmlns:jenkinsTasks="clr-namespace:Jenkins_Tasks"
        xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
        mc:Ignorable="d"
        Title="Glacier - Beta v0.2.4" MinHeight="700" MinWidth="868"
        Height="{Binding Height, Source={x:Static local:CurrentWindowState.Instance}, Mode=TwoWay}" 
        Width="{Binding Width, Source={x:Static local:CurrentWindowState.Instance}, Mode=TwoWay}" 
        Top="{Binding LocationTop, Source={x:Static local:CurrentWindowState.Instance}, Mode=TwoWay}" 
        Left="{Binding LocationLeft, Source={x:Static local:CurrentWindowState.Instance}, Mode=TwoWay}"
        WindowState="{Binding WindowState, Source={x:Static local:CurrentWindowState.Instance}, Mode=TwoWay}"
        Closing="MainWindow_Closing"
        Loaded="Window_Loaded">
    <Window.Resources>
        <!-- Images -->
        <BitmapImage x:Key="glacierLarge" UriSource="/Images/GlacierLarge.png"/>

        <!-- Converters -->
        <local:ListBoxSelectedToVisibility_Converter x:Key="ListBoxSelectedToVisibilityConverter"/>
        <local:ListBoxSelectedToBool_Converter x:Key="ListBoxSelectedToBoolConverter"/>
        <local:ListBoxItemSelectedState_Converter x:Key="ListBoxItemSelectedStateConverter"/>
        <local:AccountType_Converter x:Key="AccountTypeConverter"/>
        <local:AccountTrialOrPaid_Converter x:Key="AccountTrialOrPaidConverter"/>
        <local:AccountStatus_Converter x:Key="AccountStatusConverter"/>
        <local:AccountLookupStatusToVisibility_Converter x:Key="AccountLookupStatusToVisibilityConverter"/>
        <local:AccountLookupStatusToString_Converter x:Key="AccountLookupStatusToStringConverter"/>
        <local:LookupListAccountName_Converter x:Key="LookupListAccountNameConverter"/>
        <local:LookupResultSelectedTab_Converter x:Key="LookupResultSelectedTabConverter"/>
        <local:BooleanToVisibility_Converter x:Key="BooleanToVisibilityConverter"/>
        <local:AccountTimeout_Converter x:Key="AccountTimeoutConverter"/>
        <local:JenkinsBuildStatusToProgressIndicatorIcon_Converter x:Key="JenkinsBuildStatusToProgressIndicatorIconConverter"/>
        <local:WindowDisplayModeToVisibility_Converter x:Key="WindowDisplayModeToVisibilityConverter"/>
        <local:JenkinsRootUrlToConfigureUrl_Converter x:Key="JenkinsRootUrlToConfigureUrlConverter"/>
        <local:DatabasesSubItemSelectedTab_Converter x:Key="DatabasesSubItemSelectedTabConverter"/>
        <local:DatabasesSubItemSelectedToVisibility_Converter x:Key="DatabasesSubItemSelectedToVisibilityConverter"/>
        <local:JenkinsBuildStatusToVisibility_Converter x:Key="JenkinsBuildStatusToVisibilityConverter"/>

        <!-- Colours -->
        <SolidColorBrush Color="#FE5000" x:Key="swiftpageOrange"/>
        <SolidColorBrush Color="#374650" x:Key="darkBlue"/>
        <SolidColorBrush Color="#328CC3" x:Key="mediumBlue"/>
        <SolidColorBrush Color="#0AB4DC" x:Key="lightBlue"/>
        <SolidColorBrush Color="#78786E" x:Key="darkGray"/>
        <SolidColorBrush Color="#939389" x:Key="mediumGray"/>
        <SolidColorBrush Color="#CDCDC8" x:Key="lightGray"/>
        <SolidColorBrush Color="#00E4AB" x:Key="green"/>
        <SolidColorBrush Color="#E6004B" x:Key="red"/>

        <!-- Text -->
        <Style TargetType="{x:Type Control}" x:Key="smallFont">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
        </Style>
        <Style TargetType="{x:Type Control}" x:Key="normalFont">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
        </Style>
        <Style TargetType="{x:Type Control}" x:Key="largeFont">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
        </Style>
        <Style TargetType="{x:Type Hyperlink}" x:Key="hyperlinkStyle">
            <Setter Property="TextBlock.TextDecorations"  Value="{x:Null}"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource lightBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource normalFont}"/>
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource normalFont}"/>
        <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource normalFont}"/>
        <Style TargetType="{x:Type Hyperlink}" BasedOn="{StaticResource hyperlinkStyle}"/>

        <!-- Label -->
        <Style TargetType="{x:Type Control}" x:Key="smallFontLabel">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <EventSetter Event="MouseRightButtonDown" Handler="Label_RightClick_Copy"/>
        </Style>
        <Style TargetType="{x:Type Control}" x:Key="normalFontLabel">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <EventSetter Event="MouseRightButtonDown" Handler="Label_RightClick_Copy"/>
        </Style>
        <Style TargetType="{x:Type Control}" x:Key="largeFontLabel">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <EventSetter Event="MouseRightButtonDown" Handler="Label_RightClick_Copy"/>
        </Style>

        <Style TargetType="{x:Type Control}" x:Key="smallFontLabelNoCopy">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
        </Style>
        <Style TargetType="{x:Type Control}" x:Key="normalFontLabelNoCopy">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
        </Style>
        <Style TargetType="{x:Type Control}" x:Key="largeFontLabelNoCopy">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
        </Style>

        <Style TargetType="{x:Type Label}" BasedOn="{StaticResource normalFontLabel}"/>

        <!-- TextBlock -->
        <Style TargetType="{x:Type TextBlock}" x:Key="textBlockStyle">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <EventSetter Event="MouseRightButtonDown" Handler="TextBlock_RightClick_Copy"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="textBlockLargeFontStyle">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <EventSetter Event="MouseRightButtonDown" Handler="TextBlock_RightClick_Copy"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="textBlockSmallFontStyle">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <EventSetter Event="MouseRightButtonDown" Handler="TextBlock_RightClick_Copy"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="textBlockHyperlinkStyle">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <EventSetter Event="MouseRightButtonDown" Handler="TextBlock_RightClick_Copy"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource lightBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style TargetType="{x:Type TextBlock}" x:Key="textBlockStyleNoCopy">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="textBlockLargeFontStyleNoCopy">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="20"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
        </Style>
        <Style TargetType="{x:Type TextBlock}" x:Key="textBlockHyperlinkStyleNoCopy">
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource lightBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource textBlockStyle}"/>

        <!-- ListBox -->
        <Style TargetType="{x:Type ListBox}" x:Key="listBoxDarkBackgroundStyle">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="SelectionMode" Value="Single"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Padding" Value="0"/>
        </Style>
        <Style TargetType="{x:Type ListBox}" x:Key="listBoxLightBackgroundStyle">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="SelectionMode" Value="Single"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="{StaticResource lightGray}"/>
            <Setter Property="Padding" Value="0"/>
        </Style>
        <Style TargetType="ListBox" BasedOn="{StaticResource listBoxLightBackgroundStyle}"/>

        <!-- ListBoxItem -->
        <Style TargetType="{x:Type Control}" x:Key="listBoxItem">
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border Name="OuterBorder" BorderThickness="1" BorderBrush="Transparent" Background="White">
                            <Border Name="InnerBorder" BorderThickness="0" BorderBrush="Transparent">
                                <ContentPresenter />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter TargetName="InnerBorder" Property="Background" Value="#0AB4DC"/>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter TargetName="InnerBorder" Property="Background" Value="white"/>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter TargetName="InnerBorder" Property="Background" Value="#CDCDC8"/>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Control}" x:Key="listBoxItemHorizonal">
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="Width" Value="200"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border Name="OuterBorder" BorderThickness="1" BorderBrush="#262F8CC6" Background="White"
                                HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border Name="InnerBorder" BorderThickness="0" BorderBrush="Transparent"
                                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <ContentPresenter />
                                </Grid>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="True" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter TargetName="InnerBorder" Property="Background" Value="#0AB4DC"/>
                                    <Setter TargetName="OuterBorder" Property="BorderBrush" Value="#0AB4DC"/>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter TargetName="InnerBorder" Property="Background" Value="white"/>
                                    <Setter TargetName="OuterBorder" Property="BorderBrush" Value="#CDCDC8"/>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True" />
                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsSelected}" Value="False" />
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter TargetName="InnerBorder" Property="Background" Value="#CDCDC8"/>
                                    <Setter TargetName="OuterBorder" Property="BorderBrush" Value="#CDCDC8"/>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ListBoxItem" BasedOn="{StaticResource listBoxItem}"/>

        <!-- Button -->
        <Style TargetType="{x:Type Button}" x:Key="lightButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{StaticResource lightGray}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Foreground" Value="{StaticResource mediumGray}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="darkButton">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Foreground" Value="#328CC3"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="darkButtonBordered">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{StaticResource lightGray}" BorderThickness="0.5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource lightGray}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource lightBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="blueButtonBordered">
            <Setter Property="Background" Value="{StaticResource lightBlue}"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{StaticResource lightGray}" BorderThickness="0.5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource lightGray}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource mediumBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type ToggleButton}" x:Key="darkToggleButtonBordered">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Foreground" Value="{StaticResource darkBlue}"/>
            <Setter Property="Height" Value="26"/>
            <Setter Property="FontFamily" Value="Segoe UI"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="{TemplateBinding Background}" BorderBrush="{StaticResource lightGray}" BorderThickness="0.5">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource lightGray}"/>
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Background" Value="{StaticResource lightBlue}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <!-- Animation -->
        <Storyboard x:Key="showAndFadeAnimation">
            <ObjectAnimationUsingKeyFrames BeginTime="0:0:0" Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame KeyTime="0">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Visible</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimation BeginTime="0:0:0.0" Storyboard.TargetProperty="Opacity" From="1" To="1" Duration="0:0:0.5"/>
            <DoubleAnimation BeginTime="0:0:0.5" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:1.5"/>
            <ObjectAnimationUsingKeyFrames BeginTime="0:0:2" Storyboard.TargetProperty="Visibility">
                <DiscreteObjectKeyFrame KeyTime="0">
                    <DiscreteObjectKeyFrame.Value>
                        <Visibility>Hidden</Visibility>
                    </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>
    </Window.Resources>

    <Grid>
        <!-- Config window -->
        <Grid Visibility="{Binding DisplayMode, Source={x:Static local:CurrentWindowState.Instance}, Converter={StaticResource WindowDisplayModeToVisibilityConverter}, ConverterParameter=Config}">
            <Button x:Name="ConfigPane_Back_Button"
                        Content="{iconPacks:PackIconMaterial ArrowLeft, Height=20, Width=20}"
                        Height="22" Width="22" Margin="16,16,0,0"
                        VerticalAlignment="Top" HorizontalAlignment="Left"
                        Style="{StaticResource darkButton}"
                        Click="ConfigPane_Back_Button_Click"/>
            <!-- Jenkins server configuration -->
            <Grid Margin="55,15,15,15" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                
                <!-- Add/Remove Server -->
                <StackPanel Grid.Column="0" Margin="5,0,5,10"
                            DataContext="{Binding ElementName=ConfigPane_AvailableJenkinsServerList, Path=SelectedItem}">
                    <Label Content="Select a Jenkins server to configure:" Margin="5,5,5,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                   Style="{StaticResource normalFontLabelNoCopy}"/>
                    <ListBox x:Name="ConfigPane_AvailableJenkinsServerList"
                                    Margin="0,5,0,0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                    ItemsSource="{Binding AvailableJenkinsServers, Source={x:Static jenkinsTasks:JenkinsInfo.Instance}}">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Label Margin="3,1,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource normalFont}" Content="{Binding name}"/>
                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                    <StackPanel Visibility="{Binding ElementName=ConfigPane_AvailableJenkinsServerList, Path=SelectedItem, Converter={StaticResource ListBoxSelectedToVisibilityConverter}, ConverterParameter=Collapsible}">
                        <TextBlock Margin="10,10,10,0" TextWrapping="Wrap"
                                    Style="{StaticResource textBlockStyleNoCopy}">
                                <Hyperlink NavigateUri="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type StackPanel}}, Path=DataContext.url, Converter={StaticResource JenkinsRootUrlToConfigureUrlConverter}}"
                                            RequestNavigate="Hyperlink_RequestNavigate">
                                    <Run Text="Click Here" TextDecorations="Underline"/>
                                </Hyperlink>
                                and log in to get your Username and API Token, then enter them below.
                                <LineBreak/>
                                <LineBreak/>
                                Remember, your API token is not your normal password.
                        </TextBlock>
                        <Label Content="Username:" Margin="5,20,5,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                Style="{StaticResource normalFontLabelNoCopy}"/>
                        <TextBox x:Name="ConfigPane_AddServer_Username_TextBox" Margin="5,5,5,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                        <Label Content="API Token:" Margin="5,5,5,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                Style="{StaticResource normalFontLabelNoCopy}"/>
                        <TextBox x:Name="ConfigPane_AddServer_Token_TextBox" Margin="5,5,5,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
                        <Button Margin="5,15,5,0" Content="Add Server"
                                Style="{StaticResource blueButtonBordered}"
                                Click="ConfigPane_AddServer_Go_Click"/>
                    </StackPanel>
                </StackPanel>

                <!-- Configured Jenkins servers -->
                <StackPanel Grid.Column="1"
                            Margin="5,0,5,0">
                    <Label Margin="0,5,0,0" Content="Configured Jenkins servers"
                           HorizontalAlignment="Stretch" VerticalAlignment="Top"
                           Style="{StaticResource normalFontLabelNoCopy}"/>
                    <ListBox x:Name="Config_ConfiguredJenkinsServerList"
                         Margin="0,5,0,0" VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                         ItemsSource="{Binding ConfiguredJenkinsServers, Source={x:Static jenkinsTasks:JenkinsInfo.Instance}}">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Label Margin="3,1,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource normalFont}" Content="{Binding name}"/>
                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                    <Button Margin="0,5,0,0" Content="Remove Server"
                            HorizontalAlignment="Stretch" VerticalAlignment="Top"
                            Style="{StaticResource darkButtonBordered}"
                            Click="ConfigPane_RemoveServer_Click"
                            IsEnabled="{Binding ElementName=Config_ConfiguredJenkinsServerList, Path=SelectedItem, Converter={StaticResource ListBoxSelectedToBoolConverter}}"/>
                </StackPanel>
            </Grid>
        </Grid>
        
        <!-- Lookup window -->
        <Grid Visibility="{Binding DisplayMode, Source={x:Static local:CurrentWindowState.Instance}, Converter={StaticResource WindowDisplayModeToVisibilityConverter}, ConverterParameter=Lookup}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="250" />
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
        
            <!-- "My Lookups" pane on the left -->
            <Grid x:Name="LookupListPane" Grid.Column="0" Margin="0,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="#374650">
                <Label Content="My Lookups" Style="{StaticResource largeFontLabelNoCopy}" Margin="10,8,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Foreground="{StaticResource lightGray}"/>
                <Button x:Name="LookupListPane_NewLookup_Button"
                        Content="{iconPacks:PackIconMaterialLight Plus, Height=20, Width=20}"
                        Height="22" Width="22" Margin="0,16,16,0"
                        VerticalAlignment="Top" HorizontalAlignment="Right"
                        Style="{StaticResource lightButton}"
                        Click="LookupListPane_NewLookup_Click"/>
                <ListBox Margin="0,55,0,52"
                         HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                         Style="{StaticResource listBoxDarkBackgroundStyle}"
                         x:Name="LookupListPane_Lookups_ListBox"
                         ItemsSource="{Binding Path=LookupResults}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Button VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,5,5,0"
                                        Content="{iconPacks:PackIconMaterialLight Plus, Height=15, Width=15, Rotation=45}"
                                        Style="{StaticResource darkButton}"
                                        Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}, Path=IsMouseOver, Converter={StaticResource BooleanToVisibilityConverter}}"
                                        Click="LookupListPane_RemoveLookup_Click"/>
                                <Label Margin="3,1,20,0" VerticalAlignment="Top" HorizontalAlignment="Left" Width="223"
                                       Style="{StaticResource normalFontLabelNoCopy}">
                                    <TextBlock Style="{StaticResource textBlockStyleNoCopy}"
                                               Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.AccountName, Converter={StaticResource LookupListAccountNameConverter}}"
                                               TextTrimming="CharacterEllipsis"/>
                                </Label>
                                <Label Margin="3,25,0,0" VerticalAlignment="Top" HorizontalAlignment="Left"
                                       Style="{StaticResource normalFontLabelNoCopy}"
                                       Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupStatus, Converter={StaticResource AccountLookupStatusToVisibilityConverter}, ConverterParameter=Successful}">
                                    <TextBlock Style="{StaticResource textBlockSmallFontStyle}"
                                               Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupTime}"/>
                                </Label>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
                <Button x:Name="LookupListPane_Configure_Button"
                        Content="{iconPacks:PackIconMaterialLight Cog, Height=20, Width=20}"
                        Height="22" Width="22" Margin="16,0,0,16"
                        VerticalAlignment="Bottom" HorizontalAlignment="Left"
                        Style="{StaticResource lightButton}"
                        Click="LookupListPane_Configure_Button_Click"/>
            </Grid>
        
            <!-- Blank pane showing "No account selected", displays when no lookup is selected -->
            <Grid Grid.Column="1" Margin="0,0,0,0"
                  Visibility="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem, Converter={StaticResource ListBoxSelectedToVisibilityConverter}, ConverterParameter=Reverse}">
                <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Image Source="{StaticResource glacierLarge}" Height="300" Width="300" HorizontalAlignment="Center"/>
                    <Label Content="No account selected" Style="{StaticResource largeFont}" HorizontalAlignment="Center" Margin="0,10,0,0"/>
                </StackPanel>
            </Grid>
        
            <!-- Lookup Results -->
            <Grid Grid.Column="1" Margin="0,0,0,0"
                  Visibility="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem, Converter={StaticResource ListBoxSelectedToVisibilityConverter}}"
                  DataContext="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
            
                <!-- Lookup Results: New Lookup -->
                <Grid x:Name="LookupResultsNewLookupPane" Grid.Row="0" Grid.RowSpan="3" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="15,5,15,0"
                      Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupStatus, Converter={StaticResource AccountLookupStatusToVisibilityConverter}, ConverterParameter=NotStarted:InProgress:NotFound:Failed}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                    </Grid.RowDefinitions>
                    <Grid Margin="0,5,0,0" Grid.Row="0">
                        <Label Style="{StaticResource normalFont}" Content="Region"
                               HorizontalAlignment="Left" VerticalAlignment="Top"/>
                        <ListBox Margin="0,30,0,0"
                                 BorderThickness="1" BorderBrush="{StaticResource lightGray}"
                                 HorizontalAlignment="Left" VerticalAlignment="Stretch"
                                 Width="500"
                                 ItemsSource="{Binding ConfiguredJenkinsServers, Source={x:Static jenkinsTasks:JenkinsInfo.Instance}}"
                                 SelectedItem="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.JenkinsServer}">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Label Margin="3,1,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource normalFont}" Content="{Binding name}"/>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Grid>
                    <Grid Margin="0,5,0,0" Grid.Row="1">
                        <Label Style="{StaticResource normalFont}" Content="Lookup By"
                               HorizontalAlignment="Left" VerticalAlignment="Top"/>
                        <ListBox Margin="0,30,0,0"
                                 BorderThickness="1" BorderBrush="{StaticResource lightGray}"
                                 HorizontalAlignment="Left" VerticalAlignment="Stretch"
                                 Width="500"
                                 ItemsSource="{Binding LookupTypeList, Source={x:Static jenkinsTasks:JenkinsInfo.Instance}}"
                                 SelectedItem="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupType}">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Label Margin="3,1,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource normalFont}" Content="{Binding friendlyName}"/>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Grid>
                    <Grid Margin="0,5,0,0" Grid.Row="2">
                        <Label Style="{StaticResource normalFont}" Content="Lookup Value"
                               HorizontalAlignment="Left" VerticalAlignment="Top"/>
                        <TextBox VerticalAlignment="Top" HorizontalAlignment="Left"
                                 Margin="0,30,0,0"
                                 BorderBrush="{StaticResource lightGray}"
                                 Width="500"
                                 Style="{StaticResource normalFont}" Text="{Binding LookupValue}"
                                 KeyDown="NewLookupPane_LookupValueBox_KeyDown"/>
                    </Grid>
                    <Grid Margin="0,20.5,0,0" Grid.Row="3">
                        <Button Style="{StaticResource darkButtonBordered}" Content="Lookup"
                                Width="500"
                                HorizontalAlignment="Left" VerticalAlignment="Top"
                                Click="NewLookupPane_LookupButton_Click"/>
                    </Grid>
                    <Grid Margin="0,5,0,0" Grid.Row="4">
                        <Label Style="{StaticResource normalFont}"
                               Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupStatus, Converter={StaticResource AccountLookupStatusToStringConverter}}"
                               Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupStatus, Converter={StaticResource AccountLookupStatusToVisibilityConverter}, ConverterParameter=NotStarted:Reverse}"
                               HorizontalAlignment="Left" VerticalAlignment="Top"/>
                    </Grid>
                </Grid>
            
                <!-- Lookup Results: Basic Info -->
                <Grid x:Name="LookupResultsBasicInfoPane" Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="15,5,0,0"
                      Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupStatus, Converter={StaticResource AccountLookupStatusToVisibilityConverter}, ConverterParameter=Refreshing:Successful}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="20"/><!-- Just a spacer, no data should be in here -->
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="10"/><!-- Just a spacer, no data should be in here -->
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                    </Grid.RowDefinitions>
                    <Button x:Name="LookupResults_Reset_Button" Grid.Column="2" Grid.RowSpan="9000"
                            Content="{iconPacks:PackIconMaterialLight Refresh, Height=20, Width=20}"
                            Height="22" Width="22" Margin="0,16,16,0"
                            VerticalAlignment="Top" HorizontalAlignment="Right"
                            Style="{StaticResource darkButton}"
                            Click="LookupResults_Reset_Button_Click"/>
                    <Label Grid.Column="2" Grid.RowSpan="9000"
                               Margin="0,50,12,0"
                               HorizontalAlignment="Right" VerticalAlignment="Top"
                               Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupStatus, Converter={StaticResource AccountLookupStatusToVisibilityConverter}, ConverterParameter=Refreshing}"
                               Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupStatus, Converter={StaticResource AccountLookupStatusToStringConverter}}"/>
                    <TextBlock Style="{StaticResource textBlockLargeFontStyle}"
                           Grid.Column="0" Grid.Row="0"
                           Margin="5,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                           Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.AccountName}"/>
                    <TextBlock
                           Grid.Column="2" Grid.Row="0"
                           Margin="5,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                           Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.ZuoraAccount}"/>
                    <TextBlock
                           Grid.Column="0" Grid.Row="1"
                           Margin="5,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                           Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.AccountType, Converter={StaticResource AccountTypeConverter}}"/>
                    <TextBlock
                           Grid.Column="2" Grid.Row="1"
                           Margin="5,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                           Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.Email}"/>
                    <TextBlock
                           Grid.Column="0" Grid.Row="3"
                           Margin="5,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                           Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.TrialOrPaid, Converter={StaticResource AccountTrialOrPaidConverter}}"/>
                    <TextBlock
                           Grid.Column="0" Grid.Row="4"
                           Margin="5,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                           Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.SuspendStatus, Converter={StaticResource AccountStatusConverter}, ConverterParameter=DataContext.ArchiveStatus|DataContext.DeleteStatus}"/>
                    <TextBlock
                           Grid.Column="0" Grid.ColumnSpan="3" Grid.Row="5"
                           Margin="5,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Bottom"
                           Style="{StaticResource textBlockStyleNoCopy}">
                        Login URL: 
                        <Hyperlink NavigateUri="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LoginUrl}" RequestNavigate="Hyperlink_RequestNavigate">
                            <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LoginUrl}" Style="{StaticResource textBlockHyperlinkStyle}"/>
                        </Hyperlink>
                    </TextBlock>
                </Grid>

                <!-- Lookup Results: Databases -->
                <Grid x:Name="LookupResultsDatabasesPane" Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="15,5,0,0"
                      Visibility="{Binding ElementName=LookupResultsDatabaseButton, Path=IsSelected, Converter={StaticResource ListBoxItemSelectedStateConverter}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                
                    <!-- Database list -->
                    <Grid Grid.Column="0">
                        <ListBox x:Name="LookupResults_DatabaseList"
                                 Margin="0,0,0,15"
                                 Width="200"
                                 HorizontalAlignment="Left" VerticalAlignment="Stretch"
                                 ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.Databases}"
                                 SelectionChanged="LookupResults_DatabaseList_SelectionChanged"
                                 SelectedIndex="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem.SelectedDatabase}">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Label Margin="3,1,0,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                               Width="191"
                                               Style="{StaticResource normalFontLabelNoCopy}">
                                            <TextBlock Style="{StaticResource textBlockStyleNoCopy}"
                                                       Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.Name, Converter={StaticResource LookupListAccountNameConverter}}"
                                                       TextTrimming="CharacterEllipsis"/>
                                        </Label>
                                        <Label Margin="3,25,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource smallFontLabel}" Content="{Binding Server}"/>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Grid>

                    <Grid Grid.Column="1"
                          Visibility="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem, Converter={StaticResource ListBoxSelectedToVisibilityConverter}}">
                        <!-- Batbase Mode switch -->
                        <ListBox x:Name="LookupResults_DatabaseSubItemSwitch" Margin="20,0,0,0" Width="40" Height="auto"
                                 HorizontalAlignment="Left" VerticalAlignment="Top"
                                 HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
                                 SelectedIndex="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.DatabasesSubItemSelected, Converter={StaticResource DatabasesSubItemSelectedTabConverter}}">
                            <ListBoxItem x:Name="DatabasesTab_InfoOption"
                                         HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Label Content="{iconPacks:PackIconFontAwesome Info, Height=24, Width=24}"
                                       Style="{StaticResource normalFontLabelNoCopy}"/>
                            </ListBoxItem>
                            <ListBoxItem x:Name="DatabasesTab_UsersOption"
                                         HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Label Content="{iconPacks:PackIconFontAwesome Users, Height=24, Width=24}"
                                       Style="{StaticResource normalFontLabelNoCopy}"/>
                            </ListBoxItem>
                            <ListBoxItem x:Name="DatabasesTab_BackupsOption"
                                         HorizontalAlignment="Center" VerticalAlignment="Center">
                                <Label Content="{iconPacks:PackIconOcticons FileZip, Height=24, Width=24}"
                                       Style="{StaticResource normalFontLabelNoCopy}"/>
                            </ListBoxItem>
                        </ListBox>

                        <!-- Database Info -->
                        <Grid Margin="59,0,15,15"
                                Visibility="{Binding ElementName=LookupResults_DatabaseSubItemSwitch, Path=SelectedIndex, Converter={StaticResource DatabasesSubItemSelectedToVisibilityConverter}, ConverterParameter=Info}">
                            <StackPanel Margin="5,0,15,15" Grid.Column="1">
                                <TextBlock Margin="5,5,0,5"
                                           Style="{StaticResource textBlockStyleNoCopy}">
                                    Database Name:
                                    <LineBreak/>
                                    <TextBlock>
                                        <Run Text="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.Name}"/>
                                    </TextBlock>
                                </TextBlock>
                                <TextBlock Margin="5,5,0,5"
                                           Style="{StaticResource textBlockStyleNoCopy}">
                                    SQL Server:
                                    <LineBreak/>
                                    <TextBlock>
                                        <Run Text="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.Server}"/>
                                    </TextBlock>
                                </TextBlock>
                                <ToggleButton x:Name="UnlockDatabaseButton" Margin="5,10,5,0" Content="Unlock Database"
                                              HorizontalAlignment="Left" VerticalAlignment="Top"
                                              Style="{StaticResource darkToggleButtonBordered}"
                                              Width="300"/>
                                <Border x:Name="UnlockDatabaseConfirmation" Visibility="{Binding ElementName=UnlockDatabaseButton, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Collapsible}"
                                        BorderBrush="{StaticResource lightGray}" BorderThickness="0.5"
                                        Margin="5,-0.5,5,0"
                                        HorizontalAlignment="Left" VerticalAlignment="Top"
                                        Width="300">
                                    <StackPanel Margin="0,0,0,0">
                                        <TextBlock Margin="5,5,5,5"
                                                   TextWrapping="Wrap"
                                                   Style="{StaticResource textBlockStyleNoCopy}">
                                            This will unlock the database
                                            <LineBreak/>
                                            <Run Text="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.Name}"
                                                 Foreground="{StaticResource lightBlue}"/>
                                            <LineBreak/>
                                            <LineBreak/>
                                            Are you sure you wish to proceed?
                                        </TextBlock>
                                        <Button Margin="5,5,5,10" Content="Unlock" Style="{StaticResource darkButtonBordered}" Click="Button_UnlockDatabase_Click"/>
                                    </StackPanel>
                                </Border>
                                <TextBlock Margin="5,5,0,5"
                                           Style="{StaticResource textBlockStyleNoCopy}"
                                           Text="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.UnlockDatabaseStatus, Converter={StaticResource JenkinsBuildStatusToProgressIndicatorIconConverter}}"
                                           Visibility="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.UnlockDatabaseStatus, Converter={StaticResource JenkinsBuildStatusToVisibilityConverter}, ConverterParameter=Successful:Failed:InProgress}"/>
                            </StackPanel>
                        </Grid>

                        <!-- Users List -->
                        <Grid Margin="58.5,0,0,15" Visibility="{Binding ElementName=LookupResults_DatabaseSubItemSwitch, Path=SelectedIndex, Converter={StaticResource DatabasesSubItemSelectedToVisibilityConverter}, ConverterParameter=Users}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="200"/>
                                <ColumnDefinition Width="300"/>
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0"
                                   Margin="0,5,0,0"
                                   HorizontalAlignment="Center" VerticalAlignment="Top"
                                   Visibility="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.UserLoadStatus, Converter={StaticResource JenkinsBuildStatusToVisibilityConverter}, ConverterParameter=InProgress:Failed}"
                                   Content="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.UserLoadStatus, Converter={StaticResource JenkinsBuildStatusToProgressIndicatorIconConverter}}"
                                   Style="{StaticResource normalFontLabelNoCopy}"/>
                            <ListBox Grid.Column="0" Margin="0,0,0,0" Width="200" HorizontalAlignment="Left" VerticalAlignment="Stretch"
                                     ItemsSource="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.Users}"
                                     SelectionChanged="LookupResults_DatabaseList_SelectionChanged"
                                     SelectedIndex="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.SelectedUser}"
                                     x:Name="LookupResults_UserList">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <Grid>
                                            <Label Margin="3,1,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource normalFontLabel}" Content="{Binding ContactName}"/>
                                            <Label Margin="3,25,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource smallFontLabel}" Content="{Binding Role}"/>
                                        </Grid>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                            <StackPanel Margin="15,0,15,15" Grid.Column="1"
                                        Visibility="{Binding ElementName=LookupResults_UserList, Path=SelectedItem, Converter={StaticResource ListBoxSelectedToVisibilityConverter}}">
                                <TextBlock Margin="5,5,0,5"
                                           Style="{StaticResource textBlockStyleNoCopy}">
                                    Full Name:
                                    <LineBreak/>
                                    <TextBlock>
                                        <Run Text="{Binding ElementName=LookupResults_UserList, Path=SelectedItem.ContactName}"/>
                                    </TextBlock>
                                </TextBlock>
                                <TextBlock Margin="5,5,0,5"
                                           Style="{StaticResource textBlockStyleNoCopy}">
                                    Login Name:
                                    <LineBreak/>
                                    <TextBlock>
                                        <Run Text="{Binding ElementName=LookupResults_UserList, Path=SelectedItem.LoginName}"/>
                                    </TextBlock>
                                </TextBlock>
                                <TextBlock Margin="5,5,0,5"
                                           Style="{StaticResource textBlockStyleNoCopy}">
                                    Role:
                                    <LineBreak/>
                                    <TextBlock>
                                        <Run Text="{Binding ElementName=LookupResults_UserList, Path=SelectedItem.Role}"/>
                                    </TextBlock>
                                </TextBlock>
                                <TextBlock Margin="5,5,0,5"
                                           Style="{StaticResource textBlockStyleNoCopy}">
                                    Last Login (UTC):
                                    <LineBreak/>
                                    <TextBlock>
                                        <Run Text="{Binding ElementName=LookupResults_UserList, Path=SelectedItem.LastLogin}"/>
                                    </TextBlock>
                                </TextBlock>
                                <ToggleButton x:Name="ResetUserPasswordButton" Margin="5,5,5,0" Content="Reset Password"
                                              HorizontalAlignment="Stretch" VerticalAlignment="Top"
                                              Style="{StaticResource darkToggleButtonBordered}"/>
                                <Border x:Name="ResetUserPasswordConfirmation" Visibility="{Binding ElementName=ResetUserPasswordButton, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Collapsible}"
                                        BorderBrush="{StaticResource lightGray}" BorderThickness="0.5"
                                        Margin="5,-0.5,5,0"
                                        HorizontalAlignment="Stretch" VerticalAlignment="Top">
                                    <StackPanel Margin="0,0,0,10">
                                        <TextBlock Margin="5,5,0,5"
                                                   TextWrapping="Wrap"
                                                   Style="{StaticResource textBlockStyleNoCopy}">
                                            This will reset the password for user
                                            <Run Text="{Binding ElementName=LookupResults_UserList, Path=SelectedItem.ContactName}"
                                                 Foreground="{StaticResource lightBlue}"/>
                                            to
                                            <Run Text="Actsoftware"
                                                 Foreground="{StaticResource lightBlue}"/>
                                            <LineBreak/>
                                            <LineBreak/>
                                            Are you sure you wish to proceed?
                                        </TextBlock>
                                        <Button Margin="5,5,5,0" Content="Reset password" Style="{StaticResource darkButtonBordered}" Click="Button_ResetUserPassword_Click"/>
                                    </StackPanel>
                                </Border>
                                <TextBlock Margin="5,5,0,5"
                                           Style="{StaticResource textBlockStyleNoCopy}"
                                           Text="{Binding ElementName=LookupResults_UserList, Path=SelectedItem.ResetPasswordStatus, Converter={StaticResource JenkinsBuildStatusToProgressIndicatorIconConverter}}"
                                           Visibility="{Binding ElementName=LookupResults_UserList, Path=SelectedItem.ResetPasswordStatus, Converter={StaticResource JenkinsBuildStatusToVisibilityConverter}, ConverterParameter=Successful:Failed:InProgress}"/>
                            </StackPanel>
                        </Grid>
                
                        <!-- Backups List -->
                        <Grid Margin="58.5,0,0,15" Visibility="{Binding ElementName=LookupResults_DatabaseSubItemSwitch, Path=SelectedIndex, Converter={StaticResource DatabasesSubItemSelectedToVisibilityConverter}, ConverterParameter=Backups}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="200"/>
                            <ColumnDefinition Width="200"/>
                        </Grid.ColumnDefinitions>
                        <ListBox Grid.Column="0" x:Name="LookupResults_BackupList"
                                 Margin="0,0,0,0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                 ItemsSource="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.RestoreableBackups}">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Grid>
                                        <Label Margin="3,1,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Style="{StaticResource normalFontLabel}" Content="{Binding Date}"/>
                                    </Grid>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                        <StackPanel Margin="15,0,15,0" Grid.Column="1">
                            <Button HorizontalAlignment="Stretch" VerticalAlignment="Top"
                                    Content="Load backups"
                                    Style="{StaticResource darkButtonBordered}"
                                    Click="LookupResults_DatabaseBackups_LoadBackups_Click"/>
                            <Label HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="0,5,0,0"
                                   Content="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.BackupLoadStatus, Converter={StaticResource JenkinsBuildStatusToProgressIndicatorIconConverter}}"
                                   Visibility="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.BackupLoadStatus, Converter={StaticResource JenkinsBuildStatusToVisibilityConverter}, ConverterParameter=Collapsible:InProgress:Failed}"
                                   Style="{StaticResource normalFontLabelNoCopy}"/>
                            <Button HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="0,5,0,5"
                                    Content="Retain Backup"
                                    Style="{StaticResource darkButtonBordered}"
                                    Visibility="{Binding ElementName=LookupResults_BackupList, Path=SelectedItem, Converter={StaticResource ListBoxSelectedToVisibilityConverter}}"
                                    Click="LookupResults_DatabaseBackups_RetainBackup_Click"/>
                            <Label HorizontalAlignment="Stretch" VerticalAlignment="Top" Margin="0,5,0,0"
                                   Content="{Binding ElementName=LookupResults_BackupList, Path=SelectedItem.RestoreBackupStatus, Converter={StaticResource JenkinsBuildStatusToProgressIndicatorIconConverter}}"
                                   Visibility="{Binding ElementName=LookupResults_DatabaseList, Path=SelectedItem.RestoreBackupStatus, Converter={StaticResource JenkinsBuildStatusToVisibilityConverter}, ConverterParameter=Collapsible:InProgress:Failed}"
                                   Style="{StaticResource normalFontLabelNoCopy}"/>
                        </StackPanel>
                    </Grid>
                    </Grid>
                </Grid>

                <!-- LookupResults: Details -->
                <Grid x:Name="LookupResultsDetailsPane" Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="15,5,0,0"
                      Visibility="{Binding ElementName=LookupResultsDetailsButton, Path=IsSelected, Converter={StaticResource ListBoxItemSelectedStateConverter}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="auto"/>
                    </Grid.RowDefinitions>
                    <!-- Top section -->
                    <ScrollViewer Grid.Row="0"
                                  VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled"
                                  Height="auto"
                                  VerticalAlignment="Stretch"
                                  CanContentScroll="True">
                        <StackPanel Height="auto" VerticalAlignment="Stretch" ScrollViewer.CanContentScroll="True">
                            <TextBlock Margin="5,5,0,0"
                                       Style="{StaticResource textBlockStyleNoCopy}">
                                Upload URL: 
                                <Hyperlink NavigateUri="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.UploadUrl}" RequestNavigate="Hyperlink_RequestNavigate">
                                    <TextBlock Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.UploadUrl}" Style="{StaticResource textBlockHyperlinkStyle}"/>
                                </Hyperlink>
                            </TextBlock>
                            <TextBlock Margin="5,5,0,0"
                                       Style="{StaticResource textBlockStyleNoCopy}">
                                Serial Number: 
                                <TextBlock>
                                    <Run Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.SerialNumber}"/>
                                </TextBlock>
                            </TextBlock>
                            <TextBlock Margin="5,5,0,0"
                                       Style="{StaticResource textBlockStyleNoCopy}">
                                Users: 
                                <TextBlock>
                                    <Run Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.SeatCount}"/>
                                </TextBlock>
                            </TextBlock>
                            <TextBlock Margin="5,5,0,0"
                                       Style="{StaticResource textBlockStyleNoCopy}">
                                Inactivity Timeout: 
                                <TextBlock>
                                    <Run Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.TimeoutValue, Converter={StaticResource AccountTimeoutConverter}}"/>
                                </TextBlock>
                            </TextBlock>
                            <Grid>
                                <ToggleButton x:Name="ResendWelcomeEmailButton" Margin="5,15,0,0" Content="Resend welcome email" Width="300"
                                              HorizontalAlignment="Left" VerticalAlignment="Top"
                                              Style="{StaticResource darkToggleButtonBordered}"
                                              IsChecked="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem.ResendWelcomeEmailIsExpanded}"/>
                                <Label Margin="310,14,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                       Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.ResendWelcomeEmailStatus, Converter={StaticResource JenkinsBuildStatusToProgressIndicatorIconConverter}}"
                                       Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.ResendWelcomeEmailStatus, Converter={StaticResource JenkinsBuildStatusToVisibilityConverter}, ConverterParameter=Failed:InProgress:Successful}"
                                       Style="{StaticResource smallFontLabelNoCopy}"/>
                            </Grid>
                            <Border x:Name="ResendWelcomeEmailOptions" Visibility="{Binding ElementName=ResendWelcomeEmailButton, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Collapsible}"
                                    BorderBrush="{StaticResource lightGray}" BorderThickness="0.5"
                                    Margin="5,-0.5,0,0" Width="300" HorizontalAlignment="Left">
                                <StackPanel Margin="0,0,0,10">
                                    <Label Content="Choose an option" Margin="5,5,0,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                           Style="{StaticResource normalFontLabelNoCopy}"/>
                                    <RadioButton x:Name="primaryEmail_RadioButton" GroupName="resendWelcomeEmailRadio"
                                                 Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.Email}"
                                                 Margin="5,5,0,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                 Style="{StaticResource smallFont}"
                                                 IsChecked="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem.ResendWelcomeEmailPrimaryEmailRadio}"/>
                                    <RadioButton x:Name="specifyEmail_RadioButton" GroupName="resendWelcomeEmailRadio" Content="Specify different email address"
                                                 Margin="5,5,0,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                                 Style="{StaticResource smallFont}"
                                                 IsChecked="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem.ResendWelcomeEmailSpecifyEmailRadio}"/>
                                    <TextBox x:Name="specifyEmail_TextBox" Margin="5,5,5,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                             IsEnabled="{Binding ElementName=specifyEmail_RadioButton, Path=IsChecked}"
                                             Text="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem.ResendWelcomeEmailSpecifyEmailAddress}"/>
                                    <Button Margin="5,5,5,0" Content="Send" Style="{StaticResource darkButtonBordered}" Click="Button_ResendWelcomeEmail_Click"/>
                                </StackPanel>
                            </Border>
                            <Grid>
                                <ToggleButton x:Name="ChangeInactivityTimeoutButton" Margin="5,15,0,0" Content="Change inactivity timeout" Width="300" HorizontalAlignment="Left"
                                              Style="{StaticResource darkToggleButtonBordered}"
                                              IsChecked="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem.ChangeInactivityTimeoutIsExpanded}"/>
                                <Label Margin="310,14,0,0" HorizontalAlignment="Left" VerticalAlignment="Center"
                                       Content="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.ChangeInactivityTimeoutStatus, Converter={StaticResource JenkinsBuildStatusToProgressIndicatorIconConverter}}"
                                       Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.ChangeInactivityTimeoutStatus, Converter={StaticResource JenkinsBuildStatusToVisibilityConverter}, ConverterParameter=Failed:InProgress:Successful}"
                                       Style="{StaticResource smallFontLabelNoCopy}"/>
                            </Grid>
                            <Border x:Name="ChangeInactivityTimeoutOptions" Visibility="{Binding ElementName=ChangeInactivityTimeoutButton, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Collapsible}"
                                    BorderBrush="{StaticResource lightGray}" BorderThickness="0.5"
                                    Margin="5,-0.5,0,0" Width="300" HorizontalAlignment="Left">
                                <StackPanel Margin="0,0,0,10">
                                    <Label Content="Choose a new timeout value, in minutes" Margin="5,5,0,0" VerticalAlignment="Top" HorizontalAlignment="Stretch" Style="{StaticResource smallFont}"/>
                                    <TextBox x:Name="newTimeoutValue_TextBox" Margin="5,5,5,0" VerticalAlignment="Top" HorizontalAlignment="Stretch"
                                             PreviewTextInput="ValidateTextInputNumbersOnly"
                                             Text="{Binding ElementName=LookupListPane_Lookups_ListBox, Path=SelectedItem.ChangeInactivityTimeoutNewValue}"/>
                                    <Button Margin="5,5,5,0" Content="Change" Style="{StaticResource darkButtonBordered}" Click="Button_ChangeInactivityTimeout_Click"/>
                                </StackPanel>
                            </Border>
                        </StackPanel>
                    </ScrollViewer>
                    
                    <!-- Bottom section -->
                    <StackPanel Height="auto" VerticalAlignment="Bottom" Grid.Row="1" Margin="0,0,0,20">
                        <TextBlock Margin="5,5,0,0"
                                   Style="{StaticResource textBlockStyleNoCopy}">
                            Create Date:
                            <TextBlock>
                                <Run Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.CreateDate}"/>
                            </TextBlock>
                        </TextBlock>
                        <TextBlock Margin="5,5,0,0"
                                   Style="{StaticResource textBlockStyleNoCopy}">
                            IIS Server: 
                            <TextBlock>
                                <Run Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.IISServer}"/>
                            </TextBlock>
                        </TextBlock>
                        <TextBlock Margin="5,5,0,0"
                                   Style="{StaticResource textBlockStyleNoCopy}">
                            IITID: 
                            <TextBlock>
                                <Run Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.IITID}"/>
                            </TextBlock>
                        </TextBlock>
                    </StackPanel>
                </Grid>

                <!-- Lookup Results: Activity -->
                <Grid x:Name="LookupResultsActivityPane" Grid.Row="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="15,5,0,0"
                      Visibility="{Binding ElementName=LookupResultsActivityButton, Path=IsSelected, Converter={StaticResource ListBoxItemSelectedStateConverter}}">
                    <ListBox x:Name="LookupResults_ActivityList" Margin="0,0,15,15" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                             ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.AccountActivity}"
                              HorizontalContentAlignment="Stretch">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="dateColumn" Width="200"/>
                                        <ColumnDefinition SharedSizeGroup="actionColumn" Width="200"/>
                                        <ColumnDefinition SharedSizeGroup="detailColumn" Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Label Grid.Column="0" Content="{Binding Date}"/>
                                    <Label Grid.Column="1" Content="{Binding Type}"/>
                                    <Label Grid.Column="2" Content="{Binding Detail}"/>
                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </Grid>
            
                <!-- Lookup Results: Tab Selector -->
                <Grid x:Name="LookupResultsScreenSelectPane" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,10,0,0"
                      Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.LookupStatus, Converter={StaticResource AccountLookupStatusToVisibilityConverter}, ConverterParameter=Refreshing:Successful}">
                    <ListBox HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                             SelectedIndex="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext.SelectedTab, Converter={StaticResource LookupResultSelectedTabConverter}}"
                             BorderBrush="Transparent" BorderThickness="0">
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel IsItemsHost="True" />
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>
                        <ListBoxItem x:Name="LookupResultsDetailsButton" Content="Details" Style="{StaticResource listBoxItemHorizonal}"/>
                        <ListBoxItem x:Name="LookupResultsDatabaseButton" Content="Databases" Style="{StaticResource listBoxItemHorizonal}"/>
                        <ListBoxItem x:Name="LookupResultsActivityButton" Content="Activity" Style="{StaticResource listBoxItemHorizonal}"/>
                    </ListBox>
                </Grid>
            </Grid>
        </Grid>
        
        <!-- Text copy alert -->
        <Grid x:Name="textCopiedAlert"
              VerticalAlignment="Center" HorizontalAlignment="Right"
              Visibility="Hidden"
              Background="{StaticResource lightBlue}"
              Margin="0,0,10,10">
            <Label Content="Text copied" Style="{StaticResource largeFontLabelNoCopy}"/>
        </Grid>
    </Grid>
</Window>